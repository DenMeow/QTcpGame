/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
/// –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ QDataStream
/// –†–∏—Å–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
/// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
/// –û—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
/// –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
/// –ó–≤—É–∫ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)

#include "widget.h"
#include "ui_widget.h"
#include <QSqlError>

Widget::Widget(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::Widget) //–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
{
    ui->setupUi(this);
    setWindowTitle("Server [Gartic.io]");
    // –±—É–¥—É—â–∏–π sql
    // dbTop = QSqlDatabase::addDatabase("QSQLITE");
    // dbTop.setDatabaseName("./dataBaseTop.db");
    // if(dbTop.open()) {
    //     qDebug() << "good";
    // }
    // query = new QSqlQuery(dbTop);
    // query -> exec("CREATE TABLE TopResult(Name TEXT, Result INT);");

    // model = new QSqlTableModel(this, dbTop);
    // model -> setTable("TopResult");
    // model -> select();

    ui -> inputEdit -> setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...");
    ui -> nameEdit -> setPlaceholderText("Server");
    ui -> colorButton ->setStyleSheet("color: " + colorSendMessage.name() + ";");
    ui -> pushButton_Send -> setEnabled(false);
    ui -> graphicsView -> setEnabled(false);
    ui -> pushButton_pen -> setEnabled(false);

    server = new QTcpServer();
    server -> setMaxPendingConnections(1);
    connect(server, &QTcpServer::newConnection, this, &Widget::server_New_Connect);

    scene = new paintScene();
    ui -> graphicsView -> setScene(scene);

    timer = new QTimer();
    connect(timer, &QTimer::timeout, this, &Widget::slotTimer);
    timer -> start(100);

    send_image = new QTimer();
    connect(send_image, &QTimer::timeout, this, &Widget::handleSceneChanged);
    send_image -> start(100);

    connect(thread, SIGNAL(progress(int)),ui->progressBar,SLOT(setValue(int)));
    connect(thread, SIGNAL(finish()), this, SLOT(checkThreads()));

    QPixmap pixmap("qrc:/image/pen2.png");  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    pixmap = pixmap.scaled(ui -> pushButton_pen -> size(), Qt::IgnoreAspectRatio, Qt::SmoothTransformation);  // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
    ui -> pushButton_pen -> setStyleSheet("QPushButton { border-image: url(:/image/pen2.png); }");
}

void Widget::checkThreads() //–µ—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å...
{
    QString htmlText = "<p> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " +question + "</p><ul>";
    for (int i = 0; i < userAnswer.size(); ++i) {
        htmlText += "<li>" + QString::number(i + 1) + " - " + userAnswer[i] + "</li>";
    }
    htmlText += "</ul>";
    if (countTrue == 0)
        htmlText += "–ù–∏–∫—Ç–æ –Ω–µ —É–≥–∞–¥–∞–ªüò¢";

    QSoundEffect *victorySound = new QSoundEffect(this);
    victorySound->setSource(QUrl("qrc:/victory.wav"));
    victorySound->setVolume(0.5);
    victorySound->play();

    QMessageBox msgBox;
    msgBox.setTextFormat(Qt::RichText);
    msgBox.setText(htmlText);
    msgBox.exec();

    ui -> pushButton -> setText("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É");
    if (!stop)
        on_pushButton_clicked();
}

//–∑–∞–ø—Ä–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É graphicView
void Widget::slotTimer()
{
    timer -> stop();
    scene -> setSceneRect(0,0,ui -> graphicsView -> width() - 20,ui -> graphicsView -> height() - 20);
}
void Widget::resizeEvent(QResizeEvent *event)
{
    timer -> start(100);
    QWidget::resizeEvent(event);
}


void Widget::keyPressEvent(QKeyEvent *event) //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è return
{
    if ((event -> key() == Qt::Key_Return) and ui -> inputEdit -> text().length() > 0 and !sockets.isEmpty() and !ui -> inputEdit -> text().trimmed().isEmpty())
        on_pushButton_Send_clicked();
}

void Widget::on_colorButton_clicked() //–≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
{
    colorSendMessage = QColorDialog::getColor(QColor(Qt::white),this,"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π");
    ui -> colorButton ->setStyleSheet("color: " + colorSendMessage.name() + ";");
}


Widget::~Widget() //–¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
{
    if(!sockets.isEmpty()) {
        QString text = userName + " –æ—Ç–∫–ª—é—á–∏–ª—Å—è";

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        DataToSend m_data;
        m_data.color = Qt::black;
        m_data.message = text;
        m_data.dateTime = QDateTime::currentDateTime();
        m_data.name = userName;

        QByteArray buffer_array;
        QDataStream dataStream(&buffer_array, QIODevice::WriteOnly);
        dataStream << m_data; // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

        for (QTcpSocket *client : sockets) {
            client -> write(buffer_array);
            client -> flush();
            client -> disconnectFromHost();
        }

        server -> close();
        server -> deleteLater();
    } else {
        server -> close();
        server -> deleteLater();
    }
    delete ui;
}

void Widget::on_pushButton_Listen_clicked() //–∫–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è / –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
{
    if (ui->pushButton_Listen->text() == "Connect")
    {
        QHostAddress ip;
        if(!ip.setAddress(ui -> lineEdit_IP -> text())) {
            QMessageBox::warning(this, "–û—à–∏–±–∫–∞!", "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å");
            return;
        }
        ushort port = ui->portServer->value();

        if(!server -> listen(QHostAddress::Any, port))
        {
            QMessageBox::critical(this,"–û—à–∏–±–∫–∞",server->errorString());
            return;
        }

        ui->pushButton_Listen->setText("Disconnect");
        ui -> textBrowser -> clear();
        ui -> textBrowser -> append("–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Å–µ—Ä–≤–µ—Ä, —Ç–µ–ø–µ—Ä—å –∫ –≤–∞–º –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç!");

        ui -> groupBox -> setEnabled(false);
        if (ui -> inputEdit -> text().length() > 0 and !sockets.isEmpty()) {
            ui -> pushButton_Send -> setEnabled(true);
        }
        if (!ui -> nameEdit -> text().isEmpty())
            userName = ui -> nameEdit -> text();


    }
    else
    {
        if(!sockets.isEmpty()) {
            QString text = userName + " –∑–∞–∫—Ä—ã–ª—Å—è";

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            DataToSend m_data;
            m_data.color = Qt::black;
            m_data.message = text;
            m_data.dateTime = QDateTime::currentDateTime();
            m_data.name = userName;

            QByteArray buffer_array;
            QDataStream dataStream(&buffer_array, QIODevice::WriteOnly);
            dataStream << m_data; // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

            for (QTcpSocket *client : sockets) {
                client -> write(buffer_array);
                client -> flush();
                client -> disconnectFromHost();
            }

            server -> close();
        } else {
            server -> close();
        }

        ui -> textBrowser -> append("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —Å–µ—Ä–≤–µ—Ä!");
        thread -> is_exit = true;
        thread -> wait(500);

        ui -> pushButton_Listen -> setText("Connect");

        ui -> pushButton_Send -> setEnabled(false);
        ui -> groupBox -> setEnabled(true);

        scene -> clear();
    }
}

void Widget::on_pushButton_Send_clicked() //–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
{
    QString text = userName + ": " + ui-> inputEdit -> text().toHtmlEscaped();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    DataToSend m_data;
    m_data.color = colorSendMessage.name();
    m_data.message = text;
    m_data.dateTime = QDateTime::currentDateTime();
    m_data.name = userName;

    QByteArray buffer_array;
    QDataStream dataStream(&buffer_array, QIODevice::WriteOnly);
    dataStream << m_data; // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

    for (QTcpSocket *client : sockets) {
        client -> write(buffer_array);
        client -> flush();
    }

    QString messageText = text; // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    QColor messageColor = colorSendMessage; // –¶–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    QString formattedMessage = QString("<span style='color:%1;'>[%2] %3</span>")
                                   .arg(messageColor.name())
                                   .arg(m_data.dateTime.toString("hh:mm:ss"))
                                   .arg(messageText);

    ui -> textBrowser -> append(formattedMessage);

    ui->inputEdit->clear();
}


void Widget::server_New_Connect() //–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
{
    QTcpSocket *new_socket;
    new_socket = server -> nextPendingConnection();

    //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Å–æ–∫–µ—Ç –≤ –±–∞–Ω–µ –∏–ª–∏ —É–∂–µ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
    if (banClients.indexOf(new_socket -> peerAddress().toString()) != -1 or ui -> pushButton -> text() == "–°—Ç–æ–ø –ò–≥—Ä–∞") {
        new_socket -> disconnectFromHost();
        new_socket -> close();
        return;
    }

    sockets.append(new_socket);

    //–¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ list –∏ –≤–µ–∫—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    ui->listClients -> addItem(new_socket -> peerAddress().toString());
    connectedUsers.push_back(new_socket -> peerAddress().toString());

    QString text = "–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É: " + userName;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    DataToSend m_data;
    m_data.color = Qt::black;
    m_data.message = text;
    m_data.dateTime = QDateTime::currentDateTime();
    m_data.name = userName;

    QByteArray buffer_array;
    QDataStream dataStream(&buffer_array, QIODevice::WriteOnly);
    dataStream << m_data; // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

    new_socket -> write(buffer_array);

    connect(new_socket, &QTcpSocket::readyRead, this, &Widget::readData);
    connect(new_socket, &QTcpSocket::disconnected, this, &Widget::socket_Disconnect);

    if (ui -> inputEdit -> text().length() > 0)
        ui -> pushButton_Send -> setEnabled(true);
}

void Widget::socket_Disconnect() //—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
{
    QTcpSocket * close_c = static_cast<QTcpSocket*>(QObject::sender()); // —Ç–∞–∫ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–∏–Ω–æ–≤–Ω–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    sockets.removeOne(close_c);

    ui -> listClients -> takeItem(connectedUsers.indexOf(close_c -> peerAddress().toString()));
    connectedUsers.remove(connectedUsers.indexOf(close_c -> peerAddress().toString()));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    DataToSend m_data;
    m_data.color = Qt::black;
    m_data.message = "";
    m_data.dateTime = QDateTime::currentDateTime();
    m_data.name = userName;

    QByteArray buffer_array;
    QDataStream dataStream(&buffer_array, QIODevice::WriteOnly);
    dataStream << m_data; // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

    for (QTcpSocket *client : sockets) {
        client -> write(buffer_array);
        client -> flush();
    }

    ui -> pushButton_Send -> setEnabled(false);
}

void Widget::readData() //—á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
{
    QTcpSocket *new_socket;
    new_socket = (QTcpSocket*)sender(); //–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–¥–∞–ª —Å–∏–≥–Ω–∞–ª
    QDataStream in(new_socket);

    DataToSend recieveData;

    if(in.status() == QDataStream::Ok)
    {
        in.startTransaction();
        in >> recieveData;
        if(!in.commitTransaction()) {
            //return;
        }

        QByteArray buffer_array;
        QDataStream dataStream(&buffer_array, QIODevice::WriteOnly);
        dataStream << recieveData;

        for (QTcpSocket *client : sockets) {
            if (client == new_socket) {
                continue;
            }
            client -> write(buffer_array);
            client -> flush();
        }

        QString messageText = recieveData.message;
        QColor messageColor = recieveData.color;
        QString formattedMessage = QString("<span style='color:%1;'>[%2] %3</span>")
                                       .arg(messageColor.name())
                                       .arg(recieveData.dateTime.toString("hh:mm:ss"))
                                       .arg(messageText);

        ui -> textBrowser -> append(formattedMessage);

        //–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        if (messageText.contains("–£–ì–ê–î–ê–õ!", Qt::CaseInsensitive) and userAnswer.indexOf(recieveData.name) == -1) {
            userAnswer.push_back(recieveData.name);
            ++countTrue;
        }
    }
}


void Widget::on_inputEdit_textChanged(const QString &arg1) //–∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
{
    if (arg1.trimmed().isEmpty() or ui -> pushButton_Listen -> text() == "Connect" or sockets.isEmpty()) {
        ui -> pushButton_Send -> setEnabled(false);
        send = false;
    }
    else {
        ui -> pushButton_Send -> setEnabled(true);
        send = true;
    }
}

void Widget::on_listClients_itemDoubleClicked(QListWidgetItem *item) //–±–∞–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
{
    ui -> banList -> addItem(item -> text());
    banClients.push_back((item -> text()));

    for (QTcpSocket *client : sockets) {
        if (client -> peerAddress().toString() == item -> text()) {
            QString text = "–í–∞—Å –∑–∞–±–∞–Ω–∏–ª –∞–¥–º–∏–Ω";

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            DataToSend m_data;
            m_data.color = Qt::black;
            m_data.message = text;
            m_data.dateTime = QDateTime::currentDateTime();
            m_data.name = userName;

            QByteArray buffer_array;
            QDataStream dataStream(&buffer_array, QIODevice::WriteOnly);
            dataStream << m_data; // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

            client -> write(buffer_array);

            client -> disconnectFromHost();
            client -> close();
            sockets.removeOne(client);
            break;
        }
    }
}

void Widget::on_banList_itemDoubleClicked(QListWidgetItem *item) //—Ä–∞–∑–±–∞–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
{
    ui -> banList -> takeItem(banClients.indexOf(item -> text()));
    banClients.remove(banClients.indexOf(item -> text()));
}


void Widget::on_pushButton_clicked() //–Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
{
    if (!sockets.isEmpty()) {
        if (ui -> pushButton -> text() == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É") {
            userAnswer.clear();
            countTrue = 0;
            scene -> clear();

            int index = QRandomGenerator::global() -> bounded(0, words.size());
            ui -> label_word -> setText(words.at(index));
            question = words.at(index);

            thread -> count = 500;
            thread -> start();

            QSoundEffect *victorySound = new QSoundEffect(this);
            victorySound->setSource(QUrl("qrc:/start.wav"));
            victorySound->setVolume(0.5);
            victorySound->play();

            ui -> graphicsView -> setEnabled(true);
            ui -> pushButton_pen -> setEnabled(true);
            ui -> pushButton -> setText("–°—Ç–æ–ø –ò–≥—Ä–∞");

            DataToSend m_data;
            m_data.color = colorSendMessage;
            m_data.message = "–†–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è";
            m_data.dateTime = QDateTime::currentDateTime();
            m_data.name = userName;
            m_data.answer = question;

            QByteArray buffer_array;
            QDataStream dataStream(&buffer_array, QIODevice::WriteOnly);
            dataStream << m_data; // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

            for (QTcpSocket *client : sockets) {
                client -> write(buffer_array);
            }
            stop = false;
        } else {
            thread -> is_exit = true;
            thread -> wait(500);
            stop = true;
            ui -> graphicsView -> setEnabled(false);
            ui -> pushButton_pen -> setEnabled(false);
        }
    } else {
        QMessageBox::information(this, "–ñ–¥–∏—Ç–µ..","–ü–æ–¥–æ–∂–¥–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
        ui -> pushButton_pen -> setEnabled(false);
    }
}

void Widget::handleSceneChanged() //–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∏—Å—É–Ω–æ—á–∫–æ–≤
{
    if(ui -> pushButton -> text() == "–°—Ç–æ–ø –ò–≥—Ä–∞") {
        QPixmap pixmap = ui -> graphicsView -> grab();  // –ü–æ–ª—É—á–µ–Ω–∏–µ QPixmap –∏–∑ QGraphicsView

        QImage image = pixmap.toImage();  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ QPixmap –≤ QImage

        DataToSend m_data;
        m_data.message = "—Ñ–æ—Ç–∫–∞";
        m_data.dateTime = QDateTime::currentDateTime();
        m_data.name = userName;
        m_data.image = image;

        QByteArray buffer_array;
        QDataStream dataStream(&buffer_array, QIODevice::WriteOnly);
        dataStream << m_data; // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

        for (QTcpSocket *client : sockets) {
            client -> write(buffer_array);
        }

        if(countTrue == sockets.size()) {
            thread -> is_exit = true;
            thread -> wait(500);
        }
    }
}

void Widget::on_pushButton_pen_clicked() //–≤—ã–±–æ—Ä —Ä—É—á–∫–∏
{
    colorpen = QColorDialog::getColor(Qt::white, this, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç");
    if (colorpen.isValid()) {
        scene -> setPenColor(colorpen);
    }
}

